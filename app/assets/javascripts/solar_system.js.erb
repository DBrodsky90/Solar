
var container;
var scene, camera, renderer, controls;

$(function() {

  init();
  animate();

});

function init() {

	width = window.innerWidth;
  height = window.innerHeight;

  //*******//
  // SCENE //
  //*******//

  scene = new THREE.Scene();

  //********//
  // CAMERA //
  //********//

  camera = new THREE.PerspectiveCamera(45, width/height, 1, 100000000);
  camera.position.z = 105000;

  //********************//
  // TRACKBALL CONTROLS //
  //********************//

  controls = new THREE.TrackballControls(camera);

  //*******//
  // LIGHT //
  //*******//

    // Pointlight at center of sun
  pointLight = new THREE.PointLight(0xffffff, .5);
  scene.add(pointLight);
    // Pointlight at corner of universe
  pointLight2 = new THREE.PointLight(0xffffff, 1);
  pointLight2.position.set(500000,500000,500000);
  scene.add(pointLight2);
    // Pointlight at opposite corner of universe
  pointLight3 = new THREE.PointLight(0xffffff, 1);
  pointLight3.position.set(-500000,-500000,-500000);
  scene.add(pointLight3);

  //*****************//
  // STAR BACKGROUND //
  //*****************//

  stars_geom = new THREE.Geometry();
  stars_mat = new THREE.PointCloudMaterial({color:0xEDF2B1, opacity: 0.4, size: .1, sizeAttenuation: false});
  for (var i = 0 ; i < 15000; i++) {
  	var vertex = new THREE.Vector3();
  	vertex.x = Math.random()*2-1;
  	vertex.y = Math.random()*2-1;
  	vertex.z = Math.random()*2-1;
  	vertex.multiplyScalar(100000000);
  	stars_geom.vertices.push(vertex);
  }
  stars = new THREE.PointCloud(stars_geom, stars_mat);
  stars.scale.set(100, 100, 100);
  scene.add(stars);

  //*****//
  // SUN //
  //****//

  sun_texture = new THREE.ImageUtils.loadTexture("<%= asset_path('sun_texture.jpg') %>");
  sun_geom = new THREE.SphereGeometry(5000, 30, 30);
  sun_texture.anistropy = 8;
  sun_mat = new THREE.MeshPhongMaterial({map: sun_texture, emissive: 0xffffff});
  sun = new THREE.Mesh(sun_geom, sun_mat);
  scene.add(sun);

  //*********//
  // MERCURY //
  //*********//

  // Load the mercury texture
  mercury_texture = new THREE.ImageUtils.loadTexture("<%= asset_path('mercury_texture.jpg') %>")
  mercury_geom = new THREE.SphereGeometry(350, 20, 20);
  mercury_texture.anistropy = 8;
  mercury_mat = new THREE.MeshLambertMaterial({map: mercury_texture});
  mercury = new THREE.Mesh(mercury_geom, mercury_mat);
  // Starting position of mercury
  mercury_angle = 50;
  scene.add(mercury);
  // Creates mercury orbit outline material and geometry
  mercury_orbit_mat = new THREE.LineBasicMaterial({color: 0xffffff});
  mercury_orbit_geom = new THREE.CircleGeometry(15000, 2000);
  // Removes center vertex
  mercury_orbit_geom.vertices.shift();
  mercury_orbit = new THREE.Line(mercury_orbit_geom, mercury_orbit_mat);
  mercury_orbit.rotateX(Math.PI/2);
  // Add the mercury and its orbit outline to the scene
  scene.add(mercury);
  scene.add(mercury_orbit);

  //*******//
  // VENUS //
  //*******//

  // Load the venus texture
  venus_texture = new THREE.ImageUtils.loadTexture("<%= asset_path('venus_texture.jpg') %>")
  venus_geom = new THREE.SphereGeometry(350, 20, 20);
  venus_texture.anistropy = 8;
  venus_mat = new THREE.MeshLambertMaterial({map: venus_texture});
  venus = new THREE.Mesh(venus_geom, venus_mat);
  // Starting position of venus
  venus_angle = 100;
  // Creates venus orbit outline material and geometry
  venus_orbit_mat = new THREE.LineBasicMaterial({color: 0xffffff});
  venus_orbit_geom = new THREE.CircleGeometry(26000, 2000);
  // Removes center vertex
  venus_orbit_geom.vertices.shift();
  venus_orbit = new THREE.Line(venus_orbit_geom, venus_orbit_mat);
  venus_orbit.rotateX(Math.PI/2);
  // Add the venus and its orbit outline to the scene
  scene.add(venus);
  scene.add(venus_orbit);

  //*******//
  // EARTH //
  //*******//

  // Loads the earth texture
  earth_texture = new THREE.ImageUtils.loadTexture("<%= asset_path('earth_texture.jpg') %>")
  earth_geom = new THREE.SphereGeometry(350, 20, 20);
  earth_texture.anistropy = 8;
  earth_mat = new THREE.MeshLambertMaterial({map: earth_texture});
  earth = new THREE.Mesh(earth_geom, earth_mat);
  // Starting position of earth
  earth_angle = 150;
  // Creates earth orbit outline material and geometry
  earth_orbit_mat = new THREE.LineBasicMaterial({color: 0xffffff});
  earth_orbit_geom = new THREE.CircleGeometry(35000, 2000);
  // Removes center vertex
  earth_orbit_geom.vertices.shift();
  earth_orbit = new THREE.Line(earth_orbit_geom, earth_orbit_mat);
  earth_orbit.rotateX(Math.PI/2);
  // Add the earth and its orbit outline to the scene
  scene.add(earth);
  scene.add(earth_orbit);

  //******//
  // MARS //
  //******//

  // Loads the mars texture
  mars_texture = new THREE.ImageUtils.loadTexture("<%= asset_path('mars_texture.jpg') %>")
  mars_geom = new THREE.SphereGeometry(350, 20, 20);
  mars_texture.anistropy = 8;
  mars_mat = new THREE.MeshLambertMaterial({map: mars_texture});
  mars = new THREE.Mesh(mars_geom, mars_mat);
  // Starting position of mars
  mars_angle = 200;
  // Creates mars orbit outline material and geometry
  mars_orbit_mat = new THREE.LineBasicMaterial({color: 0xffffff});
  mars_orbit_geom = new THREE.CircleGeometry(45000, 2000);
  // Removes center vertex
  mars_orbit_geom.vertices.shift();
  mars_orbit = new THREE.Line(mars_orbit_geom, mars_orbit_mat);
  mars_orbit.rotateX(Math.PI/2);
  // Add the mars and its orbit outline to the scene
  scene.add(mars);
  scene.add(mars_orbit);

  //***************//
  // ASTEROID BELT //
  //**************//

  asteroids_texture = new THREE.ImageUtils.loadTexture("<%= asset_path('asteroid_texture.jpg') %>")
  asteroids_geom = new THREE.Geometry();
  asteroids_mat = new THREE.PointCloudMaterial({color: 0x6D6E69, opacity: 1, size: 2, sizeAttenuation: false, map: asteroids_texture});
  for (var i = 0 ; i < 20000; i++) {
    var vertex = new THREE.Vector3();
    var xRandomDistFromCenter = 55000 + Math.random() * 85000;
    var zRandomDistFromCenter = 55000 + Math.random() * 85000;
    randomNum = Math.random()
    vertex.x = 800 * Math.sin(randomNum * Math.PI * 2) + xRandomDistFromCenter * Math.sin(randomNum*Math.PI*2);
    vertex.y = -5000 + Math.random()* 5000;
    vertex.z = 800 * Math.cos(randomNum * Math.PI * 2) + zRandomDistFromCenter * Math.cos(randomNum*Math.PI*2);
    asteroids_geom.vertices.push(vertex);
  }
  asteroid = new THREE.PointCloud(asteroids_geom, asteroids_mat);
  scene.add(asteroid);

  //*********//
  // JUPITER //
  //********//

  // Loads the jupiter texture
  jupiter_texture = new THREE.ImageUtils.loadTexture("<%= asset_path('jupiter_texture.jpg') %>")
  jupiter_geom = new THREE.SphereGeometry(1800, 20, 20);
  jupiter_texture.anistropy = 8;
  jupiter_mat = new THREE.MeshLambertMaterial({map: jupiter_texture});
  jupiter = new THREE.Mesh(jupiter_geom, jupiter_mat);
  // Starting position of jupiter
  jupiter_angle = 300;
  // Creates jupiter orbit outline material and geometry
  jupiter_orbit_mat = new THREE.LineBasicMaterial({color: 0xffffff});
  jupiter_orbit_geom = new THREE.CircleGeometry(150000, 2000);
  // Removes center vertex
  jupiter_orbit_geom.vertices.shift();
  jupiter_orbit = new THREE.Line(jupiter_orbit_geom, jupiter_orbit_mat);
  jupiter_orbit.rotateX(Math.PI/2);
  // Add the jupiter and its orbit outline to the scene
  scene.add(jupiter);
  scene.add(jupiter_orbit);

  //********//
  // SATURN //
  //********//

  // Loads the saturn texture
  saturn_texture = new THREE.ImageUtils.loadTexture("<%= asset_path('saturn_texture.jpg') %>")
  saturn_geom = new THREE.SphereGeometry(800, 20, 20);
  saturn_texture.anistropy = 8;
  saturn_mat = new THREE.MeshLambertMaterial({map: saturn_texture});
  saturn = new THREE.Mesh(saturn_geom, saturn_mat);
  // Starting position of saturn
  saturn_angle = 350;
  // Creates saturn orbit outline material and geometry
  saturn_orbit_mat = new THREE.LineBasicMaterial({color: 0xffffff});
  saturn_orbit_geom = new THREE.CircleGeometry(230000, 2000);
  // Removes center vertex
  saturn_orbit_geom.vertices.shift();
  saturn_orbit = new THREE.Line(saturn_orbit_geom, saturn_orbit_mat);
  saturn_orbit.rotateX(Math.PI/2);
  // Add the saturn and its orbit outline to the scene
  scene.add(saturn);
  scene.add(saturn_orbit);

  //********//
  // URANUS //
  //********//

  // Loads the uranus texture
  uranus_texture = new THREE.ImageUtils.loadTexture("<%= asset_path('uranus_texture.jpg') %>")
  uranus_geom = new THREE.SphereGeometry(800, 20, 20);
  uranus_texture.anistropy = 8;
  uranus_mat = new THREE.MeshLambertMaterial({map: uranus_texture});
  uranus = new THREE.Mesh(uranus_geom, uranus_mat);
  // Starting position of uranus
  uranus_angle = 400;
  // Creates uranus orbit outline material and geometry
  uranus_orbit_mat = new THREE.LineBasicMaterial({color: 0xffffff});
  uranus_orbit_geom = new THREE.CircleGeometry(300000, 2000);
  // Removes center vertex
  uranus_orbit_geom.vertices.shift();
  uranus_orbit = new THREE.Line(uranus_orbit_geom, uranus_orbit_mat);
  uranus_orbit.rotateX(Math.PI/2);
  // Add the uranus and its orbit outline to the scene
  scene.add(uranus);
  scene.add(uranus_orbit);

  //*********//
  // NEPTUNE //
  //*********//

  // Loads the neptune texture
  neptune_texture = new THREE.ImageUtils.loadTexture("<%= asset_path('neptune_texture.jpg') %>")
  neptune_geom = new THREE.SphereGeometry(800, 20, 20);
  neptune_texture.anistropy = 8;
  neptune_mat = new THREE.MeshLambertMaterial({map: neptune_texture});
  neptune = new THREE.Mesh(neptune_geom, neptune_mat);
  // Starting position of neptune
  neptune_angle = 450;
  // Creates neptune orbit outline material and geometry
  neptune_orbit_mat = new THREE.LineBasicMaterial({color: 0xffffff});
  neptune_orbit_geom = new THREE.CircleGeometry(380000, 2000);
  // Removes center vertex
  neptune_orbit_geom.vertices.shift();
  neptune_orbit = new THREE.Line(neptune_orbit_geom, neptune_orbit_mat);
  neptune_orbit.rotateX(Math.PI/2);
  // Add the neptune and its orbit outline to the scene
  scene.add(neptune);
  scene.add(neptune_orbit);

  //*********//
	// RENDERS //
  //*********//

	renderer = new THREE.WebGLRenderer();
	renderer.setSize(width,height);
	renderer.setClearColor(0x000000, 1);
  $('body').append(renderer.domElement);
	renderer.render(scene, camera);

}

function animate() {
  requestAnimationFrame(animate);

  // Planet Rotations
  sun.rotation.y+=0.005;
  mercury.rotation.y+=0.005;
  venus.rotation.y+=0.005;
  earth.rotation.y+=0.05;
  mars.rotation.y+=0.005;
  jupiter.rotation.y+=0.005;
  saturn.rotation.y+=0.005;
  neptune.rotation.y+=0.005;


  // Mercury Revolution
  mercury.position.x = Math.sin(mercury_angle*0.1)*15000;
  mercury.position.z = Math.cos(mercury_angle*0.1)*15000;
  mercury_angle += Math.PI/180*2;

  // Venus Revolution
  venus.position.x = Math.sin(venus_angle*0.1)*26000;
  venus.position.z = Math.cos(venus_angle*0.1)*26000;
  venus_angle += Math.PI/180*2;

  // Earth Revolution
  earth.position.x = Math.sin(earth_angle*0.1)*35000;
  earth.position.z = Math.cos(earth_angle*0.1)*35000;
  earth_angle += Math.PI/180*2;

  // Mars Revolution
  mars.position.x = Math.sin(mars_angle*0.1)*45000;
  mars.position.z = Math.cos(mars_angle*0.1)*45000;
  mars_angle += Math.PI/180*2;		 

  // Jupiter Revolution
  jupiter.position.x = Math.sin(jupiter_angle*0.1)*150000;
  jupiter.position.z = Math.cos(jupiter_angle*0.1)*150000;
  jupiter_angle += Math.PI/180*2;		 

  // Saturn Revolution
  saturn.position.x = Math.sin(saturn_angle*0.1)*230000;
  saturn.position.z = Math.cos(saturn_angle*0.1)*230000;
  saturn_angle += Math.PI/180*2;	

  // Uranus Revolution
  uranus.position.x = Math.sin(uranus_angle*0.1)*300000;
  uranus.position.z = Math.cos(uranus_angle*0.1)*300000;
  uranus_angle += Math.PI/180*2;	

  // Neptune Revoltion	 		  		   
  neptune.position.x = Math.sin(neptune_angle*0.1)*380000;
  neptune.position.z = Math.cos(neptune_angle*0.1)*380000;
  neptune_angle += Math.PI/180*2;	

  render();
}

function render() {
  controls.update();
  renderer.render(scene, camera);
}	