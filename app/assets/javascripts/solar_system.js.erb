
var container;
var scene, camera, renderer, controls;

$(function() {

  // Sets up the enviroment and creates all planets
  init();
  // render loop
  animate();

  //**************//
  // MOUSE EVENTS //
  //**************//

  // Make the text color of Planets white when clicked
  $('.planet').click(function() {
    $('.planet').removeClass('white');
    $(this).toggleClass('white');
  });

  // Click event to switch camera view for each planet, and also toggles the Planet Info Box
  $('.planet').click(function() {
    if ($(this).html() === "Sun") {
      $('.planet-info').hide();
    } else {
      $('.planet-info').show();
    }
    switch ($(this).html()) {
      case 'Sun':
        changeCameraView(sun);
        break;
      case 'Mercury':
        changeCameraView(mercury);
        getPlanetInfo(mercury);
        break;
      case 'Venus':
        changeCameraView(venus);
        getPlanetInfo(venus);
        break;
      case 'Earth':
        changeCameraView(earth);
        getPlanetInfo(earth);
        break;
      case 'Mars':
        changeCameraView(mars);
        getPlanetInfo(mars);
        break;
      case 'Jupiter':
        changeCameraView(jupiter);
        getPlanetInfo(jupiter);
        break;
      case 'Saturn':
        changeCameraView(saturn);
        getPlanetInfo(saturn);
        break;
      case 'Uranus':
        changeCameraView(uranus);
        getPlanetInfo(uranus);
        break;
      case 'Neptune':
        changeCameraView(neptune);
        getPlanetInfo(neptune);
        break;
    }
  })

});

function init() {

	width = window.innerWidth;
  height = window.innerHeight;

  //*******//
  // SCENE //
  //*******//

  scene = new THREE.Scene();

  //********//
  // CAMERA //
  //********//

  camera = new THREE.PerspectiveCamera(45, width/height, 1, 10000000000);
  camera.position.z = 1000000;
  camera.position.y = 100000;

  //****************//
  // ORBIT CONTROLS //
  //****************//

  controls = new THREE.OrbitControls(camera);
  // Set the zoom max and min distance
  controls.maxDistance = 4000000;
  controls.minDistance = 5000;
  // Set the zoom and rotate speed of the camera
  controls.zoomSpeed = 0.3;
  controls.rotateSpeed = 0.3;

  //*******//
  // LIGHT //
  //*******//

    // Pointlight at center of sun
  var pointLight = new THREE.PointLight(0xffffff, .8);
  scene.add(pointLight);
    // Pointlight at corner of universe
  var pointLight2 = new THREE.PointLight(0xffffff, .4);
  pointLight2.position.set(5000000,5000000,5000000);
  scene.add(pointLight2);
    // Pointlight at opposite corner of universe
  var pointLight3 = new THREE.PointLight(0xffffff, .4);
  pointLight3.position.set(-5000000,-5000000,-5000000);
  scene.add(pointLight3);

  //*****************//
  // STAR BACKGROUND //
  //*****************//

  var stars_geom = new THREE.Geometry();
  var stars_mat = new THREE.PointCloudMaterial({color:0xEDF2B1, opacity: 1, size: .1, sizeAttenuation: false});
  // Make 15000 star particles and give them random positions
  for (var i = 0 ; i < 15000; i++) {
  	var vertex = new THREE.Vector3();
  	vertex.x = Math.random()*2-1;
  	vertex.y = Math.random()*2-1;
  	vertex.z = Math.random()*2-1;
    // Scales it to make it seem like the stars are far away
  	vertex.multiplyScalar(100000000);
  	stars_geom.vertices.push(vertex);
  }
  stars = new THREE.PointCloud(stars_geom, stars_mat);
  stars.scale.set(100, 100, 100);
  scene.add(stars);

  //*****//
  // SUN //
  //****//

  var sun_texture = new THREE.ImageUtils.loadTexture("<%= asset_path('sun_texture.jpg') %>");
  var sun_geom = new THREE.SphereGeometry(60000, 30, 30);
  sun_texture.anistropy = 8;
  var sun_mat = new THREE.MeshPhongMaterial({map: sun_texture, emissive: 0xffffff});
  sun = new THREE.Mesh(sun_geom, sun_mat);
  scene.add(sun);

  // set focus of camera to the sun when its created
  controls.target = sun.position;

  //*********//
  // MERCURY //
  //*********//

  // Load the mercury texture
  var mercury_texture = new THREE.ImageUtils.loadTexture("<%= asset_path('mercury_texture.jpg') %>")
  var mercury_geom = new THREE.SphereGeometry(15000, 20, 20);
  mercury_texture.anistropy = 8;
  var mercury_mat = new THREE.MeshLambertMaterial({map: mercury_texture});
  mercury = new THREE.Mesh(mercury_geom, mercury_mat);
  // Starting position of mercury
  mercury_angle = 50;
  scene.add(mercury);
  // Creates mercury orbit outline material and geometry
  var mercury_orbit_mat = new THREE.LineBasicMaterial({color: 0x1F1F1F});
  var mercury_orbit_geom = new THREE.CircleGeometry(200000, 5000);
  // Removes center vertex
  mercury_orbit_geom.vertices.shift();
  var mercury_orbit = new THREE.Line(mercury_orbit_geom, mercury_orbit_mat);
  mercury_orbit.rotateX(Math.PI/2);
  // Add the mercury and its orbit outline to the scene
  scene.add(mercury);
  scene.add(mercury_orbit);

  //*******//
  // VENUS //
  //*******//

  // Load the venus texture
  var venus_texture = new THREE.ImageUtils.loadTexture("<%= asset_path('venus_texture.jpg') %>")
  var venus_geom = new THREE.SphereGeometry(15000, 20, 20);
  venus_texture.anistropy = 8;
  var venus_mat = new THREE.MeshLambertMaterial({map: venus_texture});
  venus = new THREE.Mesh(venus_geom, venus_mat);
  // Starting position of venus
  venus_angle = 100;
  // Creates venus orbit outline material and geometry
  var venus_orbit_mat = new THREE.LineBasicMaterial({color: 0x240021});
  var venus_orbit_geom = new THREE.CircleGeometry(300000, 5000);
  // Removes center vertex
  venus_orbit_geom.vertices.shift();
  var venus_orbit = new THREE.Line(venus_orbit_geom, venus_orbit_mat);
  venus_orbit.rotateX(Math.PI/2);
  // Add the venus and its orbit outline to the scene
  scene.add(venus);
  scene.add(venus_orbit);

  //*******//
  // EARTH //
  //*******//

  // Loads the earth texture
  var earth_texture = new THREE.ImageUtils.loadTexture("<%= asset_path('earth_texture.jpg') %>")
  var earth_geom = new THREE.SphereGeometry(15000, 20, 20);
  earth_texture.anistropy = 8;
  var earth_mat = new THREE.MeshLambertMaterial({map: earth_texture});
  earth = new THREE.Mesh(earth_geom, earth_mat);
  // Starting position of earth
  earth_angle = 150;
  // Creates earth orbit outline material and geometry
  var earth_orbit_mat = new THREE.LineBasicMaterial({color: 0x002400});
  var earth_orbit_geom = new THREE.CircleGeometry(400000, 5000);
  // Removes center vertex
  earth_orbit_geom.vertices.shift();
  var earth_orbit = new THREE.Line(earth_orbit_geom, earth_orbit_mat);
  earth_orbit.rotateX(Math.PI/2);
  // Add the earth and its orbit outline to the scene
  scene.add(earth);
  scene.add(earth_orbit);

  //******//
  // MARS //
  //******//

  // Loads the mars texture
  var mars_texture = new THREE.ImageUtils.loadTexture("<%= asset_path('mars_texture.jpg') %>")
  var mars_geom = new THREE.SphereGeometry(15000, 20, 20);
  mars_texture.anistropy = 8;
  var mars_mat = new THREE.MeshLambertMaterial({map: mars_texture});
  mars = new THREE.Mesh(mars_geom, mars_mat);
  // Starting position of mars
  mars_angle = 200;
  // Creates mars orbit outline material and geometry
  var mars_orbit_mat = new THREE.LineBasicMaterial({color: 0x240000});
  var mars_orbit_geom = new THREE.CircleGeometry(500000, 5000);
  // Removes center vertex
  mars_orbit_geom.vertices.shift();
  var mars_orbit = new THREE.Line(mars_orbit_geom, mars_orbit_mat);
  mars_orbit.rotateX(Math.PI/2);
  // Add the mars and its orbit outline to the scene
  scene.add(mars);
  scene.add(mars_orbit);

  //***************//
  // ASTEROID BELT //
  //**************//

  var asteroids_texture = new THREE.ImageUtils.loadTexture("<%= asset_path('asteroid_texture.jpg') %>")
  var asteroids_geom = new THREE.SphereGeometry();
  var asteroids_mat = new THREE.PointCloudMaterial({color: 0x6D6E69, opacity: 1, size: 1.5, sizeAttenuation: false, map: asteroids_texture});
  for (var i = 0 ; i < 20000; i++) {
    var vertex = new THREE.Vector3();
    var xRandomDistFromCenter = 550000 + Math.random() * 259000;
    var zRandomDistFromCenter = 550000 + Math.random() * 259000;
    randomNum = Math.random()
    vertex.x = 800 * Math.sin(randomNum * Math.PI * 2) + xRandomDistFromCenter * Math.sin(randomNum*Math.PI*2);
    vertex.y = -5000 + Math.random()* 5000;
    vertex.z = 800 * Math.cos(randomNum * Math.PI * 2) + zRandomDistFromCenter * Math.cos(randomNum*Math.PI*2);
    asteroids_geom.vertices.push(vertex);
  }
  var asteroid = new THREE.PointCloud(asteroids_geom, asteroids_mat);
  scene.add(asteroid);

  //*********//
  // JUPITER //
  //********//

  // Loads the jupiter texture
  var jupiter_texture = new THREE.ImageUtils.loadTexture("<%= asset_path('jupiter_texture.jpg') %>")
  var jupiter_geom = new THREE.SphereGeometry(30000, 20, 20);
  jupiter_texture.anistropy = 8;
  var jupiter_mat = new THREE.MeshLambertMaterial({map: jupiter_texture});
  jupiter = new THREE.Mesh(jupiter_geom, jupiter_mat);
  // Starting position of jupiter
  jupiter_angle = 300;
  // Creates jupiter orbit outline material and geometry
  var jupiter_orbit_mat = new THREE.LineBasicMaterial({color: 0x2E1D00});
  var jupiter_orbit_geom = new THREE.CircleGeometry(900000, 5000);
  // Removes center vertex
  jupiter_orbit_geom.vertices.shift();
  var jupiter_orbit = new THREE.Line(jupiter_orbit_geom, jupiter_orbit_mat);
  jupiter_orbit.rotateX(Math.PI/2);
  // Add the jupiter and its orbit outline to the scene
  scene.add(jupiter);
  scene.add(jupiter_orbit);

  //********//
  // SATURN //
  //********//

  // Loads the saturn texture
  var saturn_texture = new THREE.ImageUtils.loadTexture("<%= asset_path('saturn_texture.jpg') %>")
  var saturn_geom = new THREE.SphereGeometry(20000, 20, 20);
  saturn_texture.anistropy = 8;
  var saturn_mat = new THREE.MeshLambertMaterial({map: saturn_texture});
  saturn = new THREE.Mesh(saturn_geom, saturn_mat);
  // Starting position of saturn
  saturn_angle = 350;
  // Creates saturn orbit outline material and geometry
  var saturn_orbit_mat = new THREE.LineBasicMaterial({color: 0x061F00});
  var saturn_orbit_geom = new THREE.CircleGeometry(1100000, 5000);
  // Removes center vertex
  saturn_orbit_geom.vertices.shift();
  var saturn_orbit = new THREE.Line(saturn_orbit_geom, saturn_orbit_mat);
  saturn_orbit.rotateX(Math.PI/2);
  // Add the saturn and its orbit outline to the scene
  scene.add(saturn);
  scene.add(saturn_orbit);

  //********//
  // URANUS //
  //********//

  // Loads the uranus texture
  var uranus_texture = new THREE.ImageUtils.loadTexture("<%= asset_path('uranus_texture.jpg') %>")
  var uranus_geom = new THREE.SphereGeometry(20000, 20, 20);
  uranus_texture.anistropy = 8;
  var uranus_mat = new THREE.MeshLambertMaterial({map: uranus_texture});
  uranus = new THREE.Mesh(uranus_geom, uranus_mat);
  // Starting position of uranus
  uranus_angle = 400;
  // Creates uranus orbit outline material and geometry
  var uranus_orbit_mat = new THREE.LineBasicMaterial({color: 0x002D2E});
  var uranus_orbit_geom = new THREE.CircleGeometry(1300000, 5000);
  // Removes center vertex
  uranus_orbit_geom.vertices.shift();
  var uranus_orbit = new THREE.Line(uranus_orbit_geom, uranus_orbit_mat);
  uranus_orbit.rotateX(Math.PI/2);
  // Add the uranus and its orbit outline to the scene
  scene.add(uranus);
  scene.add(uranus_orbit);

  //*********//
  // NEPTUNE //
  //*********//

  // Loads the neptune texture
  var neptune_texture = new THREE.ImageUtils.loadTexture("<%= asset_path('neptune_texture.jpg') %>")
  var neptune_geom = new THREE.SphereGeometry(20000, 20, 20);
  neptune_texture.anistropy = 8;
  var neptune_mat = new THREE.MeshLambertMaterial({map: neptune_texture});
  neptune = new THREE.Mesh(neptune_geom, neptune_mat);
  // Starting position of neptune
  neptune_angle = 450;
  // Creates neptune orbit outline material and geometry
  var neptune_orbit_mat = new THREE.LineBasicMaterial({color: 0x00002E, opacity: .2});
  var neptune_orbit_geom = new THREE.CircleGeometry(1500000, 5000);
  // Removes center vertex
  neptune_orbit_geom.vertices.shift();
  var neptune_orbit = new THREE.Line(neptune_orbit_geom, neptune_orbit_mat);
  neptune_orbit.rotateX(Math.PI/2);
  // Add the neptune and its orbit outline to the scene
  scene.add(neptune);
  scene.add(neptune_orbit);

  //*********//
	// RENDERS //
  //*********//

	renderer = new THREE.WebGLRenderer();
	renderer.setSize(width,height);
	renderer.setClearColor(0x000000, 1);
  $('body').append(renderer.domElement);
	renderer.render(scene, camera);

}

  //***********//
  // FUNCTIONS //
  //***********//

function animate() {
  requestAnimationFrame(animate);

  // Planet Rotations
  sun.rotation.y+=0.001;
  mercury.rotation.y+=0.001;
  venus.rotation.y+=0.001;
  earth.rotation.y+=0.001;
  mars.rotation.y+=0.001;
  jupiter.rotation.y+=0.001;
  saturn.rotation.y+=0.001;
  neptune.rotation.y+=0.001;


  // Mercury Revolution
  mercury.position.x = Math.sin(mercury_angle*0.01)*200000;
  mercury.position.z = Math.cos(mercury_angle*0.01)*200000;
  mercury_angle += Math.PI/180;

  // Venus Revolution
  venus.position.x = Math.sin(venus_angle*0.01)*300000;
  venus.position.z = Math.cos(venus_angle*0.01)*300000;
  venus_angle += Math.PI/180;

  // Earth Revolution
  earth.position.x = Math.sin(earth_angle*0.01)*400000;
  earth.position.z = Math.cos(earth_angle*0.01)*400000;
  earth_angle += Math.PI/180;

  // Mars Revolution
  mars.position.x = Math.sin(mars_angle*0.01)*500000;
  mars.position.z = Math.cos(mars_angle*0.01)*500000;
  mars_angle += Math.PI/180;		 

  // Jupiter Revolution
  jupiter.position.x = Math.sin(jupiter_angle*0.01)*900000;
  jupiter.position.z = Math.cos(jupiter_angle*0.01)*900000;
  jupiter_angle += Math.PI/180;		 

  // Saturn Revolution
  saturn.position.x = Math.sin(saturn_angle*0.01)*1100000;
  saturn.position.z = Math.cos(saturn_angle*0.01)*1100000;
  saturn_angle += Math.PI/180;	

  // Uranus Revolution
  uranus.position.x = Math.sin(uranus_angle*0.01)*1300000;
  uranus.position.z = Math.cos(uranus_angle*0.01)*1300000;
  uranus_angle += Math.PI/180;	

  // Neptune Revoltion	 		  		   
  neptune.position.x = Math.sin(neptune_angle*0.01)*1500000;
  neptune.position.z = Math.cos(neptune_angle*0.01)*1500000;
  neptune_angle += Math.PI/180;	

  render();
}

function render() {
  controls.update();
  renderer.render(scene, camera);
} 

function changeCameraView(clickedPlanet) {
  // Make the camera look clicked object
  controls.target = clickedPlanet.position;
  if (controls.target !== sun.position) {
    camera.position.z = clickedPlanet.position.z + 55000;
    camera.position.y = clickedPlanet.position.y + 55000;
    camera.position.x = clickedPlanet.position.x + 55000;    
  }
}

function getPlanetInfo(planet) {
  switch (planet) {
    case mercury:
      $.get('/planets/1').done(displayPlanetData);
      break;
    case venus:
      $.get('/planets/2').done(displayPlanetData);
      break;
    case earth:
      $.get('/planets/3').done(displayPlanetData);
      break;
    case mars:
      $.get('/planets/4').done(displayPlanetData);
      break;
    case jupiter:
      $.get('/planets/5').done(displayPlanetData);
      break;
    case saturn:
      $.get('/planets/6').done(displayPlanetData);
      break;
    case uranus:
      $.get('/planets/7').done(displayPlanetData);
      break;
    case neptune:
      $.get('/planets/8').done(displayPlanetData);
      break;  
  }
}

function displayPlanetData(info) {
  $('.planet-name').html(info.name);
  $('.diameter').html(info.diameter);
  $('.avg-distance').html(info.distance_from_sun);
  $('.rotation').html(info.rotation_period);
  $('.orbit-period').html(info.orbit_period);
  $('.orbit-velocity').html(info.orbit_velocity);
  $('.moons').html(info.moons);
}






